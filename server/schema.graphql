# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Account {
  amount: Float
  balance: Float
  createdAt: DateTime!
  id: String!
  transaction: String
  updatedAt: DateTime!
  user: User
}

input AccountCreateInput {
  amount: Float
  balance: Float
  transaction: String
  user: UserWhereUniqueInput
}

input AccountCreateNestedManyWithoutUsersInput {
  connect: [AccountWhereUniqueInput!]
}

input AccountListRelationFilter {
  every: AccountWhereInput
  none: AccountWhereInput
  some: AccountWhereInput
}

input AccountOrderByInput {
  amount: SortOrder
  balance: SortOrder
  createdAt: SortOrder
  id: SortOrder
  transaction: SortOrder
  updatedAt: SortOrder
  userId: SortOrder
}

input AccountUpdateInput {
  amount: Float
  balance: Float
  transaction: String
  user: UserWhereUniqueInput
}

input AccountUpdateManyWithoutUsersInput {
  connect: [AccountWhereUniqueInput!]
  disconnect: [AccountWhereUniqueInput!]
  set: [AccountWhereUniqueInput!]
}

input AccountWhereInput {
  amount: FloatNullableFilter
  balance: FloatNullableFilter
  id: StringFilter
  transaction: StringNullableFilter
  user: UserWhereUniqueInput
}

input AccountWhereUniqueInput {
  id: String!
}

input Credentials {
  password: String!
  username: String!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

input FloatNullableFilter {
  equals: Float
  gt: Float
  gte: Float
  in: [Float!]
  lt: Float
  lte: Float
  not: Float
  notIn: [Float!]
}

type Location {
  address: String
  country: String
  createdAt: DateTime!
  id: String!
  updatedAt: DateTime!
}

input LocationCreateInput {
  address: String
  country: String
}

input LocationOrderByInput {
  address: SortOrder
  country: SortOrder
  createdAt: SortOrder
  id: SortOrder
  updatedAt: SortOrder
}

input LocationUpdateInput {
  address: String
  country: String
}

input LocationWhereInput {
  address: StringNullableFilter
  country: StringNullableFilter
  id: StringFilter
}

input LocationWhereUniqueInput {
  id: String!
}

type MetaQueryPayload {
  count: String!
}

type Mutation {
  createAccount(data: AccountCreateInput!): Account!
  createLocation(data: LocationCreateInput!): Location!
  createUser(data: UserCreateInput!): User!
  deleteAccount(where: AccountWhereUniqueInput!): Account!
  deleteLocation(where: LocationWhereUniqueInput!): Location!
  deleteUser(where: UserWhereUniqueInput!): User!
  login(credentials: Credentials!): UserInfo!
  signup(credentials: Credentials!): UserInfo!
  updateAccount(data: AccountUpdateInput!, where: AccountWhereUniqueInput!): Account!
  updateLocation(data: LocationUpdateInput!, where: LocationWhereUniqueInput!): Location!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User!
}

type Query {
  _accountsMeta(orderBy: [AccountOrderByInput!], skip: Float, take: Float, where: AccountWhereInput): MetaQueryPayload!
  _locationsMeta(orderBy: [LocationOrderByInput!], skip: Float, take: Float, where: LocationWhereInput): MetaQueryPayload!
  _usersMeta(orderBy: [UserOrderByInput!], skip: Float, take: Float, where: UserWhereInput): MetaQueryPayload!
  account(where: AccountWhereUniqueInput!): Account
  accounts(orderBy: [AccountOrderByInput!], skip: Float, take: Float, where: AccountWhereInput): [Account!]!
  location(where: LocationWhereUniqueInput!): Location
  locations(orderBy: [LocationOrderByInput!], skip: Float, take: Float, where: LocationWhereInput): [Location!]!
  profile: User!
  user(where: UserWhereUniqueInput!): User
  userInfo: UserInfo!
  users(orderBy: [UserOrderByInput!], skip: Float, take: Float, where: UserWhereInput): [User!]!
}

enum QueryMode {
  Default
  Insensitive
}

enum SortOrder {
  Asc
  Desc
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: String
  notIn: [String!]
  startsWith: String
}

input StringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: String
  notIn: [String!]
  startsWith: String
}

type User {
  accounts(orderBy: [AccountOrderByInput!], skip: Float, take: Float, where: AccountWhereInput): [Account!]!
  createdAt: DateTime!
  firstName: String
  id: String!
  lastName: String
  roles: [String!]!
  updatedAt: DateTime!
  username: String!
}

input UserCreateInput {
  accounts: AccountCreateNestedManyWithoutUsersInput
  firstName: String
  lastName: String
  password: String!
  roles: [String!]!
  username: String!
}

type UserInfo {
  accessToken: String
  roles: [String!]!
  username: String!
}

input UserOrderByInput {
  createdAt: SortOrder
  firstName: SortOrder
  id: SortOrder
  lastName: SortOrder
  password: SortOrder
  roles: SortOrder
  updatedAt: SortOrder
  username: SortOrder
}

input UserUpdateInput {
  accounts: AccountUpdateManyWithoutUsersInput
  firstName: String
  lastName: String
  password: String
  roles: [String!]
  username: String
}

input UserWhereInput {
  accounts: AccountListRelationFilter
  firstName: StringNullableFilter
  id: StringFilter
  lastName: StringNullableFilter
  username: StringFilter
}

input UserWhereUniqueInput {
  id: String!
}
